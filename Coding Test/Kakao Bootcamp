Day 1 

-- 완전 탐색 -- 

2. 로봇 청소기

문제
로봇 청소기와 방의 상태가 주어졌을 때, 청소하는 영역의 개수를 구하는 프로그램을 작성하시오.

로봇 청소기가 있는 방은 
N X M 크기의 직사각형으로 나타낼 수 있으며, 
1 X 1 크기의 정사각형 칸으로 나누어져 있다. 각각의 칸은 벽 또는 빈 칸이다. 청소기는 바라보는 방향이 있으며, 
이 방향은 동, 서, 남, 북 중 하나이다. 
방의 각 칸은 좌표 (r, c)로 나타낼 수 있고, 가장 북쪽 줄의 가장 서쪽 칸의 좌표가 (0, 0), 
가장 남쪽 줄의 가장 동쪽 칸의 좌표가 (N-1, M-1)이다. 
즉, 좌표 (r, c)는 북쪽에서 (r+1)번째에 있는 줄의 서쪽에서 (c+1)번째 칸을 가리킨다. 
처음에 빈 칸은 전부 청소되지 않은 상태이다.

로봇 청소기는 다음과 같이 작동한다.

1. 현재 칸이 아직 청소되지 않은 경우, 현재 칸을 청소한다.
2. 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 없는 경우,
    1. 바라보는 방향을 유지한 채로 한 칸 후진할 수 있다면 한 칸 후진하고 1번으로 돌아간다.
    2. 바라보는 방향의 뒤쪽 칸이 벽이라 후진할 수 없다면 작동을 멈춘다.
3. 현재 칸의 주변 4칸 중 청소되지 않은 빈 칸이 있는 경우, 
    1. 반시계 방향으로 90도 회전한다.
    2. 바라보는 방향을 기준으로 앞쪽 칸이 청소되지 않은 빈 칸인 경우 한 칸 전진한다.
    3. 1번으로 돌아간다.

입력
첫째 줄에 방의 크기 N과 M이 입력된다. (3 <= N, M <= 50)
둘째 줄에 처음에 로봇 청소기가 있는 칸의 좌표 (r, c)와 처음에 로봇 청소기가 바라보는 방향 d가 입력된다. 
d가 0인 경우 북쪽, 1인 경우 동쪽, 2인 경우 남쪽, 3인 경우 서쪽을 바라보고 있는 것이다.

셋째 줄부터 N개의 줄에 각 장소의 상태를 나타내는 N X M개의 값이 한 줄에 M개씩 입력된다. 
i번째 줄의 j번째 값은 칸 (i, j)의 상태를 나타내며, 이 값이 0인 경우 (i, j)가 청소되지 않은 빈 칸이고, 
1인 경우 (i, j)에 벽이 있는 것이다. 방의 가장 북쪽, 가장 남쪽, 가장 서쪽, 가장 동쪽 줄 중 하나 이상에 위치한 모든 칸에는 벽이 있다. 
로봇 청소기가 있는 칸은 항상 빈 칸이다.

출력
로봇 청소기가 작동을 시작한 후 작동을 멈출 때까지 청소하는 칸의 개수를 출력한다.

- 풀이 -

예상 풀이 방법

1. N X M에 대한 방 정의
2. 로봇청소기에 대한 방향 d 정의
3. 모서리 방을 벽으로 설정 (상태값 = 1)
4. 동작 정의 - 시작 : 현재 칸 청소 안된 경우 청소
            - 청소 후 주변 4칸 중 청소되지 않은 빈칸이 없을 때 

결국 그냥 위에 나온거 순서대로 정의만 하면 되는거 아닌가..?






1. N X M (3<= N, M <=50)의 방 정의
def create_room(N, M):
    room = [[0 for _ in range(M)] for _ in range(N)]
    return room

2. 로봇의 방향 정의
def robot_cleaner_direction(d):
    if d == 0:
        return "North"
    elif d == 1:
        return "East"
    elif d == 2:
        return "South"
    elif d == 3:
        return "West"
    else:
        return "Invalid direction"

-- 스택 --

3. 스택

문제
정수를 저장하는 스택을 구현한 다음, 입력으로 주어지는 명령을 처리하는 프로그램을 작성하시오.

명령은 총 다섯 가지이다.

push X: 정수 X를 스택에 넣는 연산이다.
pop: 스택에서 가장 위에 있는 정수를 빼고, 그 수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
size: 스택에 들어있는 정수의 개수를 출력한다.
empty: 스택이 비어있으면 1, 아니면 0을 출력한다.
top: 스택의 가장 위에 있는 정수를 출력한다. 만약 스택에 들어있는 정수가 없는 경우에는 -1을 출력한다.
입력
첫째 줄에 주어지는 명령의 수 N (1 ≤ N ≤ 10,000)이 주어진다. 둘째 줄부터 N개의 줄에는 명령이 하나씩 주어진다. 주어지는 정수는 1보다 크거나 같고, 100,000보다 작거나 같다. 문제에 나와있지 않은 명령이 주어지는 경우는 없다.

출력
출력해야하는 명령이 주어질 때마다, 한 줄에 하나씩 출력한다.

- 풀이 - 

그냥 하나씩 정의하면 되는거 아닌가..?








-- 동적 계획법(DP) --

6. 2 X n 타일링

문제
2×n 크기의 직사각형을 1×2, 2×1 타일로 채우는 방법의 수를 구하는 프로그램을 작성하시오.

아래 그림은 2×5 크기의 직사각형을 채운 한 가지 방법의 예이다.

입력
첫째 줄에 n이 주어진다. (1 ≤ n ≤ 1,000)

출력
첫째 줄에 2×n 크기의 직사각형을 채우는 방법의 수를 10,007로 나눈 나머지를 출력한다.

- 풀이 -

방향성 1. 1X2의 타일일 경우 무조건 2개씩 놓아서 2X2를 만들어줘야함
      2. n이 홀수일 경우 2X1 타일은 무조건 한개 이상 필요
      3. 경우의 수를 구하는 함수가 있나?
조합 또는 순열 모듈 itertools -> import itertools
itertools.permutations : 순열 / 순서를 고려하여 원소를 나열하는 경우의 수 생성 (n P m)
itertools.combinations : 조합 / 순서를 고려하지 않고 원소를 선택하는 경우의 수 (n C m)
itertools.combinations_with_replacement : 중복을 허용한 조합을 계산 (n H m)

itertools.combinations_with_replacement 이거 사용해야 할 것 같음. 타일이 중복되고 거기서 순서만 정해주면 되는 거라
방법 : 1X2의 경우는 차라리 2X2로 만들어야하는 게 필수니까 처음부터 2X2로 만들어놓고 타일을 2X2, 2X1 2가지로 경우의 수 판단
     : 1과 2의 조합으로 n을 만드는 경우의 수를 생각하면 될 듯 
     Ex) n이 4일 경우 (1, 1, 1, 1), (1, 1, 2), (2, 2) 이렇게 3가지가 나옴 / 여기서 중복 순열적용 해주면 될 듯
         (1, 1, 1, 1)은 1가지, (1, 1, 2)는 중복 순열 n!/2!=3가지, (2, 2)는 1가지 즉, 총 5가지가 나옴
     : 직접 계산하려면 import math를 해야함함


-- 구간 합 -- 

8. 구간 합 구하기 5

N×N개의 수가 N×N 크기의 표에 채워져 있다. (x1, y1)부터 (x2, y2)까지 합을 구하는 프로그램을 작성하시오. (x, y)는 x행 y열을 의미한다.

예를 들어, N = 4이고, 표가 아래와 같이 채워져 있는 경우를 살펴보자.

1	2	3	4
2	3	4	5
3	4	5	6
4	5	6	7
여기서 (2, 2)부터 (3, 4)까지 합을 구하면 3+4+5+4+5+6 = 27이고, (4, 4)부터 (4, 4)까지 합을 구하면 7이다.

표에 채워져 있는 수와 합을 구하는 연산이 주어졌을 때, 이를 처리하는 프로그램을 작성하시오.

입력
첫째 줄에 표의 크기 N과 합을 구해야 하는 횟수 M이 주어진다. (1 ≤ N ≤ 1024, 1 ≤ M ≤ 100,000) 둘째 줄부터 N개의 줄에는 표에 채워져 있는 수가 1행부터 차례대로 주어진다. 다음 M개의 줄에는 네 개의 정수 x1, y1, x2, y2 가 주어지며, (x1, y1)부터 (x2, y2)의 합을 구해 출력해야 한다. 표에 채워져 있는 수는 1,000보다 작거나 같은 자연수이다. (x1 ≤ x2, y1 ≤ y2)

출력
총 M줄에 걸쳐 (x1, y1)부터 (x2, y2)까지 합을 구해 출력한다.

- 풀이 - 

방향성 (x1, y1)부터 더해서 (x1+1 ~ N, y1) / (1 ~ N, y1+1) / ... / (1 ~ x2, y2)
입력 : M//N = y2 - y1 + 1,   M % N = x2 - x1 + 1
출력 : y2 = y1 + M - 1
위치라서 인덱스 사용해서 풀어야하나? 그럼 2차원 인덱스인가?

-- 추가 유형 -- 

12. 숨바꼭질

문제
수빈이는 동생과 숨바꼭질을 하고 있다. 수빈이는 현재 점 N(0 ≤ N ≤ 100,000)에 있고, 동생은 점 K(0 ≤ K ≤ 100,000)에 있다. 수빈이는 걷거나 순간이동을 할 수 있다. 만약, 수빈이의 위치가 X일 때 걷는다면 1초 후에 X-1 또는 X+1로 이동하게 된다. 순간이동을 하는 경우에는 1초 후에 2*X의 위치로 이동하게 된다.

수빈이와 동생의 위치가 주어졌을 때, 수빈이가 동생을 찾을 수 있는 가장 빠른 시간이 몇 초 후인지 구하는 프로그램을 작성하시오.

입력
첫 번째 줄에 수빈이가 있는 위치 N과 동생이 있는 위치 K가 주어진다. N과 K는 정수이다.

출력
수빈이가 동생을 찾는 가장 빠른 시간을 출력한다.

- 풀이 - 

1. N > K일 경우 t = N - K
2. N = K일 경우 t = 0
3. N < K일 경우 
    - (X + 1), (X - 1), (X * 2) 이 세가지로 조합을 짜야함 
    - 근데 가장 빠른 시간을 출력하려면 따로 함수가 있나?
